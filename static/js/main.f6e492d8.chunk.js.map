{"version":3,"sources":["socketUsage.js","sketch.js","App.js","index.js"],"names":["socket","io","serverHost","on","console","log","emitOSC","address","value","emit","args","sketch","p","analyser","bufferLength","frameCount","timeDataArray","freqDataArray","bgColor","drawCircleInner","r","mul","start","sliceDeg","cut","Math","PI","deg","i","sum","total","j","v","x","sin","y","cos","curveVertex","vertex","endShape","setup","createCanvas","windowWidth","windowHeight","frameRate","windowResized","resizeCanvas","myCustomRedrawAccordingToNewPropsHandler","props","Uint8Array","fftSize","btnClick","draw","undefined","getByteFrequencyData","getByteTimeDomainData","background","length","freq","threshold","max","fftMax","indexOf","floor","getFreq","maxDb","f","d","db","push","translate","map","h","s","stroke","fill","beginShape","CLOSE","noStroke","pop","drawCircle","textSize","textAlign","CENTER","text","App","navigator","mediaDevices","getUserMedia","audio","then","micStart","micError","stream","setState","style","display","context","state","microphone","createMediaStreamSource","createAnalyser","connect","frequencyBinCount","dataArray","btnTxt","update","AudioContext","window","webkitAudioContext","timer","id","this","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"mVAIMA,E,MAASC,GAAGC,mDAElBF,EAAOG,GAAG,WAAW,YAEC,EAClBC,QAAQC,IAAI,+BAGT,IAAIC,EAAU,SAACC,EAASC,GAC3BR,EAAOS,KAAK,MAAO,CACfF,QAASA,EACTG,KAAM,CAACF,MCbA,SAASG,EAAQC,GAC5B,IAAIC,EAMAC,EALAC,EAAa,EACbC,EAAgB,GAChBC,EAAgB,GAIhBC,EAAU,CAAC,EAAG,EAAG,GAiGrB,SAASC,EAAgBC,EAAGC,GAMxB,IAJA,IAGIC,EAFAC,EAAWC,GAAMC,KAAKC,GAAKZ,EAC3Ba,EAAM,EAEDC,EAAE,EAAGA,EAAEd,EAAcc,GAJpB,GAI4B,CAGlC,IAFA,IAAIC,EAAM,EACNC,EAAQ,EACHC,EAAEH,EAAGG,EAAEH,EAPV,IAOmBG,EAAEjB,EAAciB,IACrCF,GAAOb,EAAce,GACrBD,IAGJ,IAAIE,GADJH,GAAOC,GACQ,IAAOT,EAClBY,GAAKb,EAAEY,GAAKP,KAAKS,IAAIP,GACrBQ,GAAKf,EAAEY,GAAKP,KAAKW,IAAIT,GAazBf,EAAEyB,YAAYJ,EAAGE,GAEP,IAANP,IAEAN,EAAQ,CAACW,EAAGE,IAGhBR,GAAOJ,EAEXX,EAAE0B,OAAOhB,EAAM,GAAIA,EAAM,IAGzBV,EAAE2B,WAxIN3B,EAAE4B,MAAQ,WACN5B,EAAE6B,aAAa7B,EAAE8B,YAAa9B,EAAE+B,cAChC/B,EAAEgC,UAAU,KAGhBhC,EAAEiC,cAAgB,WACdjC,EAAEkC,aAAalC,EAAE8B,YAAa9B,EAAE+B,eAGpC/B,EAAEmC,yCAA2C,SAACC,GAK1C,GAHIA,EAAMlC,eACNA,EAAekC,EAAMlC,cAErBkC,EAAMnC,SAAU,CAChB,GAAsB,MAAlBmC,EAAMnC,SAAkB,OAC5BA,EAAWmC,EAAMnC,SACjBG,EAAgB,IAAIiC,WAAWpC,EAASqC,SACxCjC,EAAgB,IAAIgC,WAAWpC,EAASqC,SAExCF,EAAMG,UACKH,EAAMG,UAMzBvC,EAAEwC,KAAO,WASL,GARArC,SAEiBsC,IAAbxC,IAqIJA,EAASyC,qBAAqBrC,GAK9BJ,EAAS0C,sBAAsBvC,IArI/BJ,EAAE4C,WAAWtC,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAI,MAC7CF,EAAcyC,QAAU,GAA5B,CAEA,IACIC,EAqIR,SAAiBC,GACb,IAGIC,EAAMnC,KAAKmC,IAAL,MAAAnC,KAAI,YAAQR,IAClB4C,EAJK,MAII5C,EAAc6C,QAAQF,IAAa,EAAE9C,GAClD,OAAO8C,EAAMD,EAAYlC,KAAKsC,MAAMF,GAAU,EA3InCG,CADD,IAENC,EAAQxC,KAAKmC,IAAL,MAAAnC,KAAI,YAAQR,IAAe,IAGnCgD,EALM,GAKM,KAAQlD,EAAa,KAAO,GACxCT,EAAQ,SAAU,CAAC4D,EAAGR,EAAMS,EAAGF,IAavC,SAAoBG,EAAIV,GACpB9C,EAAEyD,OACFzD,EAAE0D,UAAU1D,EAAE8B,YAAc,EAAG9B,EAAE+B,aAAe,GAEhD,IAAItB,EAAMT,EAAE2D,IAAIH,EAAI,EAAG,EAAG,GAAI,IAC1BhD,EAAIR,EAAE2D,IAAIH,EAAI,EAAG,EAAG,GAAI,IAOxBI,EAAI/C,KAAKsC,MAAMnD,EAAE2D,IAAIb,EAAM,IAAK,IAAM,EAAG,KAAK,IAC9Ce,EAAIhD,KAAKsC,MAAMnD,EAAE2D,IAAIH,EAAI,GAAK,EAAG,EAAG,IAAI,IAC5ChE,QAAQC,IAAImE,EAAGC,GACf7D,EAAE8D,OAAF,cAAgBF,EAAhB,aAAsBC,EAAtB,YAGA7D,EAAE+D,KAAKzD,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IACvCN,EAAEgE,aACFzD,EAAgBC,EAAGC,GACnBT,EAAE2B,SAAS3B,EAAEiE,OAGbjE,EAAE+D,KAAF,eAAeH,EAAf,aAAqBC,EAArB,iBACA,IAAK,IAAI7C,EAAE,EAAGA,EAAE,GAAIA,IAChBhB,EAAEkE,WACFlE,EAAEgE,aACFzD,EAAgBC,EAAE,EAAI,EAAFQ,EAAKP,GACzBT,EAAE2B,SAAS3B,EAAEiE,OAGbjE,EAAE+D,KAAKzD,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAI,IAG/CN,EAAEmE,MA5CFC,CAAWf,EAAOP,GAElB9C,EAAEqE,SAAS,IACXrE,EAAE+D,KAAK,KACP/D,EAAEsE,UAAUtE,EAAEuE,QACdvE,EAAEwE,KAAK,aAAcxE,EAAE8B,YAAY,EAAG9B,EAAE+B,aAAe,M,UCShD0C,E,YAnEb,aAAe,IAAD,uBACZ,+CAcFlC,SAAW,WACTmC,UAAUC,aAAaC,aAAa,CAACC,OAAO,IACvCC,KAAK,EAAKC,SAAU,EAAKC,WAjBlB,EAoBdD,SAAW,SAACE,GAEV,EAAKC,SAAS,CAACC,MAAM,CAACC,QAAQ,UAFT,IAGhBC,EAAW,EAAKC,MAAhBD,QACDE,EAAaF,EAAQG,wBAAwBP,GAC7ChF,EAAWoF,EAAQI,iBACvBF,EAAWG,QAAQzF,GAEnBA,EAASqC,QAAU,KACnB,IAAIpC,EAAeD,EAAS0F,kBACxBC,EAAY,IAAIvD,WAAWpC,EAASqC,SAExC,EAAK4C,SAAU,CACbjF,SAAWA,EACX2F,UAAWA,EACX1F,aAAcA,KAnCJ,EAyCd8E,SAAW,WACT,EAAKE,SAAS,CAACW,OAAO,eACtBrG,QAAQC,IAAI,UA3CA,EA8CdqG,OAAS,WAAO,IAAD,EACe,EAAKR,MAA5BM,EADQ,EACRA,UAAW3F,EADH,EACGA,SAChBT,QAAQC,IAAImG,GACZ3F,EAASyC,qBAAqBkD,IA/C9B,IAAIG,EAAeC,OAAOD,cACjBC,OAAOC,qBACP,EAJG,OAMZ,EAAKX,MAAQ,CACXY,MAAO,KACPf,MAAO,GACPU,OAAQ,QACRR,QAASU,EAAc,IAAIA,EAAiB,MAVlC,E,sEAuDZ,OACE,6BACE,yBAAKI,GAAG,OAAOhB,MAAOiB,KAAKd,MAAMH,OAC/B,4BAAQkB,QAASD,KAAK7D,UAAW6D,KAAKd,MAAMO,SAE9C,kBAAC,IAAD,CAAW9F,OAAQA,EAAQE,SAAUmG,KAAKd,MAAMrF,SAC7CC,aAAckG,KAAKd,MAAMpF,oB,GA/DlBoG,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f6e492d8.chunk.js","sourcesContent":["import io from 'socket.io-client'\nimport {serverHost} from './config'\n\nconst nameSpace = '/user';\nconst socket = io(serverHost+nameSpace);\nlet isSocketConnect = false;\nsocket.on('connect', () => {\n    //alert('connect!');\n    isSocketConnect = true;\n    console.log('socket connect to server');\n})\n\nexport let emitOSC = (address, value)=> {\n    socket.emit('osc', {\n        address: address,\n        args: [value]\n    });\n}\n\nexport {isSocketConnect};","import { emitOSC } from \"./socketUsage\";\n\nexport default function sketch (p) {\n    let analyser;\n    let frameCount = 0;\n    let timeDataArray = [];\n    let freqDataArray = [];\n    let btnClick;\n    let button;\n    let bufferLength;\n    let bgColor = [0, 0, 0];\n\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight);\n        p.frameRate(30);\n    };\n\n    p.windowResized = () =>  {\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\n    }\n\n    p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\n        \n        if (props.bufferLength) {\n            bufferLength = props.bufferLength;\n        }\n        if (props.analyser) {\n            if (props.analyser == null) return;\n            analyser = props.analyser;\n            timeDataArray = new Uint8Array(analyser.fftSize);\n            freqDataArray = new Uint8Array(analyser.fftSize);\n        }\n        if (props.btnClick) {\n            btnClick = props.btnClick;\n            \n            if (button) button.mousePressed(btnClick);\n        }\n    };\n\n    p.draw = function () {\n        frameCount++;\n\n        if (analyser !== undefined) {\n            getAnalysedData();\n            getTimeDomainData();\n        }\n\n        p.background(bgColor[0], bgColor[1], bgColor[2], 50);\n        if (timeDataArray.length <= 0) return;\n        \n        var ths = 50;\n        var freq = getFreq(ths);\n        var maxDb = Math.max(...freqDataArray)/256.;\n        \n        \n        if (maxDb > ths/255. && frameCount % 10 === 0) {\n            emitOSC('/sound', {f: freq, d: maxDb});\n        }\n        \n        //drawTimeWave();\n        drawCircle(maxDb, freq);\n\n        p.textSize(15);\n        p.fill(200);\n        p.textAlign(p.CENTER);\n        p.text('MAKE SOUND', p.windowWidth/2, p.windowHeight - 50);\n        \n    };\n\n    function drawCircle(db, freq) {\n        p.push()\n        p.translate(p.windowWidth / 2, p.windowHeight / 2);\n        \n        let mul = p.map(db, 0, 1, 40, 50);\n        let r = p.map(db, 0, 1, 30, 70);\n\n        // p.stroke(50);\n        // p.beginShape(p.TRIANGLE_STRIP);\n        // drawCircleInner(r, mul, 0, true);\n        // p.endShape();\n\n        let h = Math.floor(p.map(freq, 100, 2000, 0, 360, true));\n        let s = Math.floor(p.map(db, 0.2, 1, 0, 50, true));\n        console.log(h, s);\n        p.stroke(`hsl(${h}, ${s}%, 50%)`);\n        //p.stroke(255);\n\n        p.fill(bgColor[0], bgColor[1], bgColor[2]);\n        p.beginShape();\n        drawCircleInner(r, mul);\n        p.endShape(p.CLOSE);\n\n        //p.fill(255,255,255,100);\n        p.fill(`hsla(${h}, ${s}%, 90%, 0.5)`)\n        for (let i=0; i<30; i++) {\n            p.noStroke();\n            p.beginShape();\n            drawCircleInner(r-4-i*2, mul);\n            p.endShape(p.CLOSE);\n            //p.fill(`hsla(${h}, 100%, 50%, 0.05)`)\n            //p.fill(0,0,0,10);\n            p.fill(bgColor[0], bgColor[1], bgColor[2], 10);\n        }\n        \n        p.pop()\n    }\n\n    function drawCircleInner(r, mul) {\n\n        let cut = 16;\n        let sliceDeg = cut*2*Math.PI / bufferLength;\n        let deg = 0;\n        let start;\n        for (let i=0; i<bufferLength; i+=cut) {\n            let sum = 0;\n            let total = 0;\n            for (let j=i; j<i+cut && j<bufferLength; j++) {\n                sum += timeDataArray[j];\n                total ++;\n            }\n            sum /= total;\n            let v = (sum / 128.0)*mul;\n            let x = (r+v) * Math.sin(deg);\n            let y = (r+v) * Math.cos(deg);\n            // let x1 = (r+dis+v) * Math.sin(deg);\n            // let y1 = (r+dis+v) * Math.cos(deg);\n            // p.push()\n            //     p.noStroke();\n            //     p.fill(255,255,255,100);\n            //     p.ellipse(x,y,5);\n            // p.pop()\n            //p.curveVertex(x, y);\n            \n            //let h = Math.floor(360*deg/(2*Math.PI));\n            //let s = p.map(sum, 0, 256, 0, 30);\n            //if (tri) p.stroke(`hsl(${h}, 20%, 50%)`);\n            p.curveVertex(x, y);\n            //if (tri) p.vertex(x1, y1);\n            if (i === 0) {\n                //start = [x, y, x1, y1];\n                start = [x, y];\n            }\n\n            deg += sliceDeg;\n        }\n        p.vertex(start[0], start[1]);\n        //if (tri) p.vertex(start[2], start[3]);\n        //p.endShape(p.CLOSE)\n        p.endShape()\n    }\n\n    function drawTimeWave() {\n        p.stroke(126);\n        p.fill(0);\n\n        let sliceWidth = p.windowWidth * 1.0 / bufferLength;\n        let x = 0;\n        let prev;\n        for(var i = 0; i < bufferLength; i++) {\n    \n            var v = timeDataArray[i] / 128.0;\n            var y = v * p.windowHeight/2;\n\n            if(i !== 0) {\n                p.line(prev[0], prev[1], x, y);\n            }\n            prev = [x, y];\n\n            x += sliceWidth;\n        }\n        p.line(prev[0], prev[1], p.windowWidth, p.windowHeight/2);\n    }\n\n    function getAnalysedData() {\n        //console.log(\"getAnalysedData\");\n        analyser.getByteFrequencyData(freqDataArray);\n        //console.log(freqDataArray);\n    }\n\n    function getTimeDomainData() {\n        analyser.getByteTimeDomainData(timeDataArray);\n        //console.log(timeDataArray);\n    }\n\n    function getFreq(threshold) {\n        var fs = 44100;\n        // var N = freqDataArray.frequencyBinCount;\n        //console.log(fs, N);\n        var max = Math.max(...freqDataArray);\n        var fftMax = freqDataArray.indexOf(max) * fs / (2*bufferLength);\n        return max > threshold ? Math.floor(fftMax) : 0;\n    }\n};\n\n","import React, {Component}  from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\nimport sketch from './sketch';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    var AudioContext = window.AudioContext // Default\n          || window.webkitAudioContext // Safari and old versions of Chrome\n          || false; \n\n    this.state = {\n      timer: null,\n      style: {},\n      btnTxt: 'START',\n      context: AudioContext? new AudioContext() : null,\n    }\n    \n  }\n\n  btnClick = () => {\n    navigator.mediaDevices.getUserMedia({audio: true})\n        .then(this.micStart, this.micError);\n  }\n\n  micStart = (stream) => {\n\n    this.setState({style:{display:'none'}});\n    let {context} = this.state;\n    var microphone = context.createMediaStreamSource(stream);\n    var analyser = context.createAnalyser();\n    microphone.connect(analyser);\n    //analyser.connect(context.destination);\n    analyser.fftSize = 2048;\n    var bufferLength = analyser.frequencyBinCount;\n    var dataArray = new Uint8Array(analyser.fftSize);\n\n    this.setState ({\n      analyser : analyser,\n      dataArray: dataArray,\n      bufferLength: bufferLength,\n      \n    });\n    //this.update();\n  }\n\n  micError = () => {\n    this.setState({btnTxt:'RE-EANBLE!'});\n    console.log('error');\n  }\n\n  update = () => {\n    let {dataArray, analyser} = this.state;\n    console.log(dataArray);\n    analyser.getByteFrequencyData(dataArray);\n    //this.setState({timer:setTimeout(this.update,200)});\n  }\n\n  render() {\n\n    return (\n      <div>\n        <div id=\"wrap\" style={this.state.style}>\n          <button onClick={this.btnClick}>{this.state.btnTxt}</button>\n        </div>\n        <P5Wrapper sketch={sketch} analyser={this.state.analyser} \n           bufferLength={this.state.bufferLength}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}